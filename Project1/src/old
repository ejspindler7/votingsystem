207 int Election::RedistributeBallots(int eliminated_candidate){
208     cout << "===============  Redistributing Ballots ============= " << endl;
209     Ballot *ballot = candidates.at(eliminated_candidate).RemoveBallot();
210     bool updatedBallotDistribution;
211     bool shouldUpdateBallot;
212     string name;
213     // Redistribute the ballots
214     while (ballot != NULL){
215         updatedBallotDistribution =  false;
216         shouldUpdateBallot = false;
217         while(!updatedBallotDistribution){
218             // Update ballot distribution
219             ballot->SetCurrDis(ballot->GetCurrDis() + 1);
220             if (ballot->GetCurrDis() > ballot->GetCandidatesSize()){
221                 // Ballot is out of candidates
222                 shouldUpdateBallot = false;
223                 updatedBallotDistribution = true;
224                 break;
225             }
226 
227             // Make sure candidate has NOT been eliminated
228             name = ballot->GetCandidateName(ballot->GetCurrDis());
229             for (int i = 0; i < candidates.size(); i++){
230                 if ( name == candidates.at(i).GetName()){
231                     shouldUpdateBallot = true;
232                     updatedBallotDistribution = true;
233                 }
234             }
235         }
236 
237         // Redistribute the ballot
238         if (shouldUpdateBallot){
239             for (int i = 0; i < candidates.size(); i++){
240                 if (name == candidates.at(i).GetName()){
241                     candidates.at(i).AddBallot(ballot);
242                     break;
243                 }
244             }
245         }
246 
247         ballot = candidates.at(eliminated_candidate).RemoveBallot();
248     }
249 
250     return 0;
251 }
